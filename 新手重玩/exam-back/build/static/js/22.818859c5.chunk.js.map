{"version":3,"sources":["containers/main/exam/addExam.jsx"],"names":["Option","AddUser","state","examType","course","handleSubmit","e","preventDefault","props","form","validateFields","err","values","a","begintime","endtime","uid","id","Date","getTime","createExam","result","code","history","push","alert","console","log","this","normFile","Array","isArray","fileList","getExamType","data","getCourse","setState","msg","getFieldDecorator","labelCol","span","wrapperCol","onSubmit","Item","required","label","rules","whitespace","message","placeholder","hasFeedback","length","map","item","value","timeId","key","timeType","classId","classType","initialValue","min","max","className","style","marginBottom","validateStatus","help","display","width","showTime","textAlign","offset","type","htmlType","React","Component","connect","authorization","AddUsers","create","name"],"mappings":"uUAcQA,E,IAAAA,OAEFC,E,2MACJC,MAAQ,CACNC,SAAU,GACVC,OAAQ,I,EAEVC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKC,MAAMC,KAAKC,eAAhB,sCAA+B,WAAOC,EAAKC,GAAZ,eAAAC,EAAA,wDACxBF,EADwB,wBAE3BC,EAAOE,UAA+B,EAAnBF,EAAOE,UAC1BF,EAAOG,QAA2B,EAAjBH,EAAOG,QACxBH,EAAOI,IAAI,EAAKR,MAAMQ,IACtBJ,EAAOK,IAAG,IAAIC,MAAOC,UALM,SAMVC,YAAWR,GAND,QAMvBS,EANuB,QAOjBC,KAER,EAAKd,MAAMe,QAAQC,KAAK,0BAA0BZ,EAAOK,IAEzDQ,MAAM,4BAERC,QAAQC,IAAIN,GAbe,0CAA/B,oCAAAO,KAAA,iB,EAkBFC,SAAW,SAAAvB,GAET,OADAoB,QAAQC,IAAI,gBAAiBrB,GACzBwB,MAAMC,QAAQzB,GACTA,EAEFA,GAAKA,EAAE0B,U,mNAGGC,c,cAAbC,E,gBACeC,c,OAAf/B,E,OACJwB,KAAKQ,SAAS,CACZjC,SAAU+B,EAAKG,IACfjC,OAAQA,EAAOiC,M,mIAGT,IACAC,EAAsBV,KAAKpB,MAAMC,KAAjC6B,kBAKR,OACE,uCALqB,CACrBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAGpB,CAA0BE,SAAUd,KAAKvB,eACvC,sBAAMsC,KAAN,CAAWC,UAAQ,EACjBC,MAAM,4BAELP,EAAkB,QAAS,CAC1BQ,MAAO,CACL,CAAEF,UAAU,EAAMG,YAAY,EAAMC,QAAS,qCAFhDV,CAKC,uBAAOW,YAAY,GAAGhC,GAAG,OAG7B,sBAAM0B,KAAN,CAAWE,MAAM,2BAAOK,aAAW,GAChCZ,EAAkB,SAAU,CAC3BQ,MAAO,CAAC,CAAEF,UAAU,EAAMI,QAAS,sDADpCV,CAGC,uBAAQW,YAAY,oDAEhBrB,KAAK1B,MAAMC,SAASgD,QAAUvB,KAAK1B,MAAMC,SAASiD,IAAI,SAACC,GACrD,OAAO,kBAACrD,EAAD,CAAQsD,MAAOD,EAAKE,OAAQC,IAAKH,EAAKE,QAASF,EAAKI,eAOrE,sBAAMd,KAAN,CAAWE,MAAM,gBACdP,EAAkB,UAAW,CAC5BQ,MAAO,CACL,CAAEF,UAAU,EAAMI,QAAS,qCAF9BV,CAKC,uBAAQW,YAAY,mCAEhBrB,KAAK1B,MAAME,OAAO+C,QAAUvB,KAAK1B,MAAME,OAAOgD,IAAI,SAACC,GACjD,OAAO,kBAACrD,EAAD,CAAQsD,MAAOD,EAAKK,QAASF,IAAKH,EAAKK,SAAUL,EAAKM,gBAOvE,sBAAMhB,KAAN,CAAWE,MAAM,eAAKD,UAAQ,GAC3BN,EAAkB,MAAO,CAAEsB,aAAc,GAAzCtB,CAA8C,uBAAauB,IAAK,EAAGC,IAAK,MACzE,0BAAMC,UAAU,iBAAhB,YAGF,sBAAMpB,KAAN,CAAWC,UAAQ,EAACN,mBAAiB,EAACO,MAAM,2BAAOmB,MAAO,CAAEC,aAAc,IACxE,sBAAMtB,KAAN,CAAWC,UAAQ,EACjBsB,eAAe,GACfC,KAAK,yDACLH,MAAO,CAAEI,QAAS,eAAgBC,MAAO,qBAExC/B,EAAkB,YAAa,CAC9BQ,MAAO,CACL,CAAEF,UAAU,EAAMI,QAAS,qCAF9BV,CAIE,uBAAYgC,UAAQ,MAEzB,0BAAMN,MAAO,CAAEI,QAAS,eAAgBC,MAAO,OAAQE,UAAW,WAAlE,KACA,sBAAM5B,KAAN,CAAWC,UAAQ,EAACoB,MAAO,CAAEI,QAAS,eAAgBC,MAAO,oBAAsBH,eAAe,GAAGC,KAAK,oDACvG7B,EAAkB,UAAW,CAC5BQ,MAAO,CACL,CAAEF,UAAU,EAAMI,QAAS,qCAF9BV,CAIE,uBAAYgC,UAAQ,OAK3B,sBAAM3B,KAAN,CAAWF,WAAY,CAAED,KAAM,GAAIgC,OAAQ,IACzC,uBAAQC,KAAK,UAAUC,SAAS,UAAhC,gB,GAtHYC,IAAMC,WAqI5B3E,EAAQ4E,kBANc,SAAA3E,GACpB,MAAO,CACLc,IAAId,EAAM4E,cAAc9D,MAIpB6D,CAAyB5E,GAGjC,IAAM8E,EAAW,IAAKC,OAAO,CAAEC,KAAM,kBAApB,CAAwChF,GAC1C8E","file":"static/js/22.818859c5.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport { getExamType, getCourse, createExam } from \"@/api\"\r\nimport {\r\n  Form,\r\n  Select,\r\n  InputNumber,\r\n  Button,\r\n  DatePicker,\r\n  Input\r\n} from 'antd';\r\n\r\nimport {connect} from \"dva\"\r\n\r\nconst { Option } = Select;\r\n\r\nclass AddUser extends React.Component {\r\n  state = {\r\n    examType: [],\r\n    course: []\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields(async (err, values) => {\r\n      if (!err) {\r\n        values.begintime = values.begintime * 1;\r\n        values.endtime = values.endtime * 1;\r\n        values.uid=this.props.uid;\r\n        values.id=new Date().getTime()\r\n        let result=await createExam(values);\r\n        if(result.code){\r\n          //携带者试题id跳到添加题目页面\r\n          this.props.history.push(\"/main/exam/addExamTest/\"+values.id)\r\n        }else{\r\n          alert(\"添加失败\")\r\n        }\r\n        console.log(result)\r\n      }\r\n    });\r\n  };\r\n\r\n  normFile = e => {\r\n    console.log('Upload event:', e);\r\n    if (Array.isArray(e)) {\r\n      return e;\r\n    }\r\n    return e && e.fileList;\r\n  };\r\n  async componentDidMount() {\r\n    let data = await getExamType();\r\n    let course = await getCourse();\r\n    this.setState({\r\n      examType: data.msg,\r\n      course: course.msg\r\n    })\r\n  }\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const formItemLayout = {\r\n      labelCol: { span: 6 },\r\n      wrapperCol: { span: 14 },\r\n    };\r\n    return (\r\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n        <Form.Item required\r\n          label=\"试卷名称\"\r\n        >\r\n          {getFieldDecorator('name1', {\r\n            rules: [\r\n              { required: true, whitespace: true, message: '请输入名称!' },\r\n            ],\r\n          })(\r\n            <Input placeholder=\"\" id=\"\" />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"考试类型\" hasFeedback>\r\n          {getFieldDecorator('select', {\r\n            rules: [{ required: true, message: '请输入考试类型！' }],\r\n          })(\r\n            <Select placeholder=\"请输入考试类型！\">\r\n              {\r\n                this.state.examType.length && this.state.examType.map((item) => {\r\n                  return <Option value={item.timeId} key={item.timeId}>{item.timeType}</Option>\r\n                })\r\n              }\r\n            </Select>,\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"课程\">\r\n          {getFieldDecorator('select2', {\r\n            rules: [\r\n              { required: true, message: '请输入课程!' },\r\n            ],\r\n          })(\r\n            <Select placeholder=\"请输入课程!\">\r\n              {\r\n                this.state.course.length && this.state.course.map((item) => {\r\n                  return <Option value={item.classId} key={item.classId}>{item.classType}</Option>\r\n                })\r\n              }\r\n            </Select>\r\n          )}\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"题量\" required>\r\n          {getFieldDecorator('num', { initialValue: 3 })(<InputNumber min={3} max={50} />)}\r\n          <span className=\"ant-form-text\"> 题</span>\r\n        </Form.Item>\r\n\r\n        <Form.Item required getFieldDecorator label=\"考试时间\" style={{ marginBottom: 0 }}>\r\n          <Form.Item required\r\n            validateStatus=\"\"\r\n            help=\"请选择考试开始时间\"\r\n            style={{ display: 'inline-block', width: 'calc(50% - 12px)' }}\r\n          >\r\n            {getFieldDecorator('begintime', {\r\n              rules: [\r\n                { required: true, message: '请输入名称!' },\r\n              ],\r\n            })(<DatePicker showTime />)}\r\n          </Form.Item>\r\n          <span style={{ display: 'inline-block', width: '24px', textAlign: 'center' }}>-</span>\r\n          <Form.Item required style={{ display: 'inline-block', width: 'calc(50% - 12px)' }} validateStatus=\"\" help=\"请选择结束的时间\">\r\n            {getFieldDecorator('endtime', {\r\n              rules: [\r\n                { required: true, message: '请输入名称!' },\r\n              ],\r\n            })(<DatePicker showTime />)}\r\n\r\n          </Form.Item>\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\r\n          <Button type='primary' htmlType='submit'>\r\n            Submit\r\n\t\t\t\t\t</Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n  return {\r\n    uid:state.authorization.uid\r\n  }\r\n}\r\n\r\nAddUser=connect(mapStateToProps)(AddUser);\r\n\r\n\r\nconst AddUsers = Form.create({ name: 'validate_other' })(AddUser);\r\nexport default AddUsers;\r\n"],"sourceRoot":""}